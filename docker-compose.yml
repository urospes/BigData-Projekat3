services:
  # ----------------- #
  # Apache Spark      #
  # ----------------- #
  spark:
    container_name: spark
    image: docker.io/bitnami/spark:latest
    environment:
      - SPARK_MODE=master
    ports:
      - '8080:8080'
  spark-worker:
    container_name: spark-worker
    image: docker.io/bitnami/spark:latest
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077



  # ------------------- #
  # Kafka + Zookeeper   #
  # ------------------- #
  zookeeper:
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      
  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:latest
    ports:
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
  
  
  
  # ------------------------- #
  # Kafka topic creation      #
  # ------------------------- #
  init-kafka:
    container_name: init-kafka
    image: docker.io/bitnami/kafka:latest
    depends_on:
     - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "cd /opt/bitnami/kafka/bin
      # blocks until kafka is reachable
      ./kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo 'Creating kafka topics'
      ./kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic traffic_data
      ./kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic predictions
      ./kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic raw_data

      echo 'Successfully created the following topics:'
      ./kafka-topics.sh --bootstrap-server kafka:9092 --list"


  # --------------- #
  # Consumer        #
  # --------------- #
  consumer_raw:
    image: consumer
    container_name: consumer_raw
    restart: always
    volumes:
     - ./results:/results
    environment:
     - TOPIC=raw_data
     - OUTPUT_FILE=/results/raw.csv
    depends_on:
      init-kafka:
        condition: service_completed_successfully

  consumer_predictions:
    image: consumer
    container_name: consumer_predictions
    restart: always
    volumes:
     - ./results:/results
    environment:
     - TOPIC=predictions
     - OUTPUT_FILE=/results/predictions.csv
    depends_on:
      init-kafka:
        condition: service_completed_successfully



  # --------------- #
  # Hadoop          #
  # --------------- #
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=mobility
    env_file:
      - ./hadoop.env

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
        
networks:
  default:
      name: mobility_infr
      
volumes:
  hadoop_namenode:
    driver: local
  hadoop_datanode:
    driver: local
  hadoop_historyserver:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  