services:
  # ----------------- #
  # Apache Spark      #
  # ----------------- #
  spark:
    container_name: spark
    image: docker.io/bitnami/spark:latest
    environment:
      - SPARK_MODE=master
    ports:
      - '8080:8080'
      - '4040:4040'
  spark-worker:
    container_name: spark-worker
    image: docker.io/bitnami/spark:latest
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077



  # ------------------- #
  # Kafka + Zookeeper   #
  # ------------------- #
  zookeeper:
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      
  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:latest
    ports:
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
  
  
  
  # ------------------------- #
  # Kafka topic creation      #
  # ------------------------- #
  init-kafka:
    container_name: init-kafka
    image: docker.io/bitnami/kafka:latest
    depends_on:
     - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "cd /opt/bitnami/kafka/bin
      # blocks until kafka is reachable
      ./kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo 'Creating kafka topics'
      ./kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic traffic_data
      ./kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic results

      echo 'Successfully created the following topics:'
      ./kafka-topics.sh --bootstrap-server kafka:9092 --list"
        
        
        
networks:
  default:
      name: mobility_infr
      
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  cassandra_data1:
    driver: local
  cassandra_data2:
    driver: local
  